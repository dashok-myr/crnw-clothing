{"ast":null,"code":"import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\nconst config = {\n  apiKey: \"AIzaSyCQL2QhDt2vpE2NRPmVWYi20_txzLD5PHM\",\n  authDomain: \"crwn-db-4d4c2.firebaseapp.com\",\n  databaseURL: \"https://crwn-db-4d4c2.firebaseio.com\",\n  projectId: \"crwn-db-4d4c2\",\n  storageBucket: \"crwn-db-4d4c2.appspot.com\",\n  messagingSenderId: \"802804025311\",\n  appId: \"1:802804025311:web:cc75f6bd94a0eb9c14666a\",\n  measurementId: \"G-JT5EYVVF11\"\n};\nfirebase.initializeApp(config);\nexport const getOrCreateUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n  const {\n    exists\n  } = snapShot;\n  if (exists) return userRef;\n  const {\n    displayName,\n    email\n  } = userAuth;\n  const createdAt = new Date();\n\n  try {\n    userRef.set({\n      displayName,\n      email,\n      createdAt,\n      ...additionalData\n    });\n  } catch (error) {\n    console.log(\"error creating user\", error.message);\n  }\n\n  return userRef;\n};\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n};\nexport const addCollectionAndDocuments = async (collectionKey, objectToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  const batch = firestore.batch();\n  objectToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit();\n};\nexport const convertCollectionsSnapshotToMap = collections => {\n  const transformedCollection = collections.docs.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n  return transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\nexport default firebase;","map":{"version":3,"sources":["/Users/dariausatyuk/Desktop/react-course/crwn-clothing/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","getOrCreateUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","getCurrentUser","Promise","resolve","reject","unsubscribe","auth","onAuthStateChanged","addCollectionAndDocuments","collectionKey","objectToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","commit","convertCollectionsSnapshotToMap","collections","transformedCollection","docs","map","title","items","data","routeName","encodeURI","toLowerCase","id","reduce","accumulator","googleProvider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\n\nconst config = {\n  apiKey: \"AIzaSyCQL2QhDt2vpE2NRPmVWYi20_txzLD5PHM\",\n  authDomain: \"crwn-db-4d4c2.firebaseapp.com\",\n  databaseURL: \"https://crwn-db-4d4c2.firebaseio.com\",\n  projectId: \"crwn-db-4d4c2\",\n  storageBucket: \"crwn-db-4d4c2.appspot.com\",\n  messagingSenderId: \"802804025311\",\n  appId: \"1:802804025311:web:cc75f6bd94a0eb9c14666a\",\n  measurementId: \"G-JT5EYVVF11\",\n};\n\nfirebase.initializeApp(config);\n\nexport const getOrCreateUserProfileDocument = async (\n  userAuth,\n  additionalData\n) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n\n  const snapShot = await userRef.get();\n  const { exists } = snapShot;\n\n  if (exists) return userRef;\n  const { displayName, email } = userAuth;\n  const createdAt = new Date();\n\n  try {\n    userRef.set({\n      displayName,\n      email,\n      createdAt,\n      ...additionalData,\n    });\n  } catch (error) {\n    console.log(\"error creating user\", error.message);\n  }\n\n  return userRef;\n};\n\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged((userAuth) => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n};\n\nexport const addCollectionAndDocuments = async (collectionKey, objectToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n\n  const batch = firestore.batch();\n  objectToAdd.forEach((obj) => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit();\n};\n\nexport const convertCollectionsSnapshotToMap = (collections) => {\n  const transformedCollection = collections.docs.map((doc) => {\n    const { title, items } = doc.data();\n\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items,\n    };\n  });\n  return transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({ prompt: \"select_account\" });\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\n\nexport default firebase;\n"]},"metadata":{},"sourceType":"module"}