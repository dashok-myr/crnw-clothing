{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyCQL2QhDt2vpE2NRPmVWYi20_txzLD5PHM\",\n  authDomain: \"crwn-db-4d4c2.firebaseapp.com\",\n  databaseURL: \"https://crwn-db-4d4c2.firebaseio.com\",\n  projectId: \"crwn-db-4d4c2\",\n  storageBucket: \"crwn-db-4d4c2.appspot.com\",\n  messagingSenderId: \"802804025311\",\n  appId: \"1:802804025311:web:cc75f6bd94a0eb9c14666a\",\n  measurementId: \"G-JT5EYVVF11\"\n};\nexport const getOrCreateUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n  const {\n    exists\n  } = snapShot;\n  if (exists) return userRef;\n  const {\n    displayName,\n    email\n  } = userAuth;\n  const createdAt = new Date();\n\n  try {\n    userRef.set({\n      displayName,\n      email,\n      createdAt,\n      ...additionalData\n    });\n  } catch (error) {\n    console.log('error creating user', error.message);\n  }\n\n  return userRef;\n};\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  promt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["/Users/dariausatyuk/Desktop/react-course/crwn-clothing/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","getOrCreateUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","initializeApp","auth","provider","GoogleAuthProvider","setCustomParameters","promt","signInWithGoogle","signInWithPopup"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP;AACA,OAAO,eAAP;AAEA,MAAMC,MAAM,GAAG;AACXC,EAAAA,MAAM,EAAE,yCADG;AAEXC,EAAAA,UAAU,EAAE,+BAFD;AAGXC,EAAAA,WAAW,EAAE,sCAHF;AAIXC,EAAAA,SAAS,EAAE,eAJA;AAKXC,EAAAA,aAAa,EAAE,2BALJ;AAMXC,EAAAA,iBAAiB,EAAE,cANR;AAOXC,EAAAA,KAAK,EAAE,2CAPI;AAQXC,EAAAA,aAAa,EAAE;AARJ,CAAf;AAWE,OAAO,MAAMC,8BAA8B,GAAG,OAAOC,QAAP,EAAiBC,cAAjB,KAAoC;AAChF,MAAG,CAACD,QAAJ,EAAc;AAEd,QAAME,OAAO,GAAGC,SAAS,CAACC,GAAV,CAAe,SAAQJ,QAAQ,CAACK,GAAI,EAApC,CAAhB;AACA,QAAMC,QAAQ,GAAG,MAAMJ,OAAO,CAACK,GAAR,EAAvB;AAEA,QAAM;AAACC,IAAAA;AAAD,MAAWF,QAAjB;AAEA,MAAGE,MAAH,EAAW,OAAON,OAAP;AAEX,QAAM;AAAEO,IAAAA,WAAF;AAAeC,IAAAA;AAAf,MAAyBV,QAA/B;AACA,QAAMW,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AAEA,MAAI;AACFV,IAAAA,OAAO,CAACW,GAAR,CAAY;AACVJ,MAAAA,WADU;AAEVC,MAAAA,KAFU;AAGVC,MAAAA,SAHU;AAIV,SAAGV;AAJO,KAAZ;AAMD,GAPD,CAOC,OAAOa,KAAP,EAAc;AACbC,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCF,KAAK,CAACG,OAAzC;AACD;;AAED,SAAOf,OAAP;AACD,CAzBM;AA6BPb,QAAQ,CAAC6B,aAAT,CAAuB5B,MAAvB;AAEA,OAAO,MAAM6B,IAAI,GAAG9B,QAAQ,CAAC8B,IAAT,EAAb;AACP,OAAO,MAAMhB,SAAS,GAAGd,QAAQ,CAACc,SAAT,EAAlB;AAEP,MAAMiB,QAAQ,GAAG,IAAI/B,QAAQ,CAAC8B,IAAT,CAAcE,kBAAlB,EAAjB;AACAD,QAAQ,CAACE,mBAAT,CAA6B;AAACC,EAAAA,KAAK,EAAE;AAAR,CAA7B;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAML,IAAI,CAACM,eAAL,CAAqBL,QAArB,CAA/B;AAEP,eAAe/B,QAAf","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nconst config = {\n    apiKey: \"AIzaSyCQL2QhDt2vpE2NRPmVWYi20_txzLD5PHM\",\n    authDomain: \"crwn-db-4d4c2.firebaseapp.com\",\n    databaseURL: \"https://crwn-db-4d4c2.firebaseio.com\",\n    projectId: \"crwn-db-4d4c2\",\n    storageBucket: \"crwn-db-4d4c2.appspot.com\",\n    messagingSenderId: \"802804025311\",\n    appId: \"1:802804025311:web:cc75f6bd94a0eb9c14666a\",\n    measurementId: \"G-JT5EYVVF11\"\n  };\n\n  export const getOrCreateUserProfileDocument = async (userAuth, additionalData) => {\n    if(!userAuth) return;\n\n    const userRef = firestore.doc(`users/${userAuth.uid}`);\n    const snapShot = await userRef.get();\n\n    const {exists} = snapShot;\n\n    if(exists) return userRef;\n\n    const { displayName, email } = userAuth;\n    const createdAt = new Date();\n \n    try {\n      userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      })\n    }catch (error) {\n      console.log('error creating user', error.message)\n    }\n\n    return userRef;\n  }\n\n   \n\n  firebase.initializeApp(config);\n\n  export const auth = firebase.auth();\n  export const firestore = firebase.firestore();\n\n  const provider = new firebase.auth.GoogleAuthProvider();\n  provider.setCustomParameters({promt: 'select_account'});\n  export const signInWithGoogle = () => auth.signInWithPopup(provider);\n\n  export default firebase;\n"]},"metadata":{},"sourceType":"module"}